// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`has a valid snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Upload />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <Dragdrop
        handleDrop={[Function]}
      >
        <div
          className="form"
        >
          <div>
            <label
              className="btn"
              htmlFor="fileButton"
            >
              Choose file or drop here
            </label>
            <input
              id="fileButton"
              onChange={[Function]}
              type="file"
            />
          </div>
          <div />
        </div>
        <code />
      </Dragdrop>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <div
            className="form"
          >
            <div>
              <label
                className="btn"
                htmlFor="fileButton"
              >
                Choose file or drop here
              </label>
              <input
                id="fileButton"
                onChange={[Function]}
                type="file"
              />
            </div>
            <div />
          </div>,
          <code />,
        ],
        "handleDrop": [Function],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div>
                <label
                  className="btn"
                  htmlFor="fileButton"
                >
                  Choose file or drop here
                </label>
                <input
                  id="fileButton"
                  onChange={[Function]}
                  type="file"
                />
              </div>,
              <div />,
              null,
              null,
            ],
            "className": "form",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <label
                    className="btn"
                    htmlFor="fileButton"
                  >
                    Choose file or drop here
                  </label>,
                  <input
                    id="fileButton"
                    onChange={[Function]}
                    type="file"
                  />,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Choose file or drop here",
                    "className": "btn",
                    "htmlFor": "fileButton",
                  },
                  "ref": null,
                  "rendered": "Choose file or drop here",
                  "type": "label",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "id": "fileButton",
                    "onChange": [Function],
                    "type": "file",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "input",
                },
              ],
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  false,
                  false,
                ],
              },
              "ref": null,
              "rendered": Array [
                false,
                false,
              ],
              "type": "div",
            },
            null,
            null,
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": null,
          },
          "ref": null,
          "rendered": null,
          "type": "code",
        },
      ],
      "type": [Function],
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <Dragdrop
          handleDrop={[Function]}
        >
          <div
            className="form"
          >
            <div>
              <label
                className="btn"
                htmlFor="fileButton"
              >
                Choose file or drop here
              </label>
              <input
                id="fileButton"
                onChange={[Function]}
                type="file"
              />
            </div>
            <div />
          </div>
          <code />
        </Dragdrop>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <div
              className="form"
            >
              <div>
                <label
                  className="btn"
                  htmlFor="fileButton"
                >
                  Choose file or drop here
                </label>
                <input
                  id="fileButton"
                  onChange={[Function]}
                  type="file"
                />
              </div>
              <div />
            </div>,
            <code />,
          ],
          "handleDrop": [Function],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <div>
                  <label
                    className="btn"
                    htmlFor="fileButton"
                  >
                    Choose file or drop here
                  </label>
                  <input
                    id="fileButton"
                    onChange={[Function]}
                    type="file"
                  />
                </div>,
                <div />,
                null,
                null,
              ],
              "className": "form",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <label
                      className="btn"
                      htmlFor="fileButton"
                    >
                      Choose file or drop here
                    </label>,
                    <input
                      id="fileButton"
                      onChange={[Function]}
                      type="file"
                    />,
                  ],
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Choose file or drop here",
                      "className": "btn",
                      "htmlFor": "fileButton",
                    },
                    "ref": null,
                    "rendered": "Choose file or drop here",
                    "type": "label",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "id": "fileButton",
                      "onChange": [Function],
                      "type": "file",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": "input",
                  },
                ],
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    false,
                    false,
                  ],
                },
                "ref": null,
                "rendered": Array [
                  false,
                  false,
                ],
                "type": "div",
              },
              null,
              null,
            ],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": null,
            },
            "ref": null,
            "rendered": null,
            "type": "code",
          },
        ],
        "type": [Function],
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
  Symbol(enzyme.__childContext__): null,
}
`;
